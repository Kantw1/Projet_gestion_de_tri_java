package model;

import java.util.ArrayList;
import java.util.List;
import model.*;

/**
 * Repr√©sente une poubelle intelligente capable de g√©rer les d√©p√¥ts de d√©chets.
 * Elle contr√¥le l'acc√®s, les types de d√©chets autoris√©s, et calcule les taux de remplissage et p√©nalit√©s.
 */
public class Poubelle {

    // ========== ATTRIBUTS ==========

    private CentreDeTri centreDeTri; // nouvelle propri√©t√©


    /** Identifiant unique de la poubelle */
    private int id;

    /** Capacit√© maximale de la poubelle (en unit√©s de quantit√©) */
    private int capaciteMax;

    /** Emplacement g√©ographique de la poubelle */
    private String emplacement;

    /** Type de poubelle (ex: Bleue, Jaune, etc.) */
    private TypePoubelle typePoubelle;

    /** Quantit√© actuelle de d√©chets pr√©sents dans la poubelle */
    private int quantiteActuelle;

    /** Liste des d√©p√¥ts effectu√©s dans cette poubelle */
    private List<Depot> historiqueDepots;

    /** Codes d'acc√®s autoris√©s (acc√®s sans authentification compl√®te) */
    private List<Integer> accesAutorises;

    /** Utilisateurs autoris√©s √† acc√©der √† cette poubelle */
    private List<Utilisateur> utilisateursAutorises;

    /** Seuil √† partir duquel une alerte est d√©clench√©e */
    private int seuilAlerte;

    /** Types de d√©chets autoris√©s dans cette poubelle */
    private List<NatureDechet> dechetsAutorises;

    // ========== CONSTRUCTEUR ==========

    public Poubelle(int id, int capaciteMax, String emplacement, TypePoubelle typePoubelle, int quantiteActuelle, int seuilAlerte, CentreDeTri centreDeTri) {
        this.id = id;
        this.capaciteMax = capaciteMax;
        this.emplacement = emplacement;
        this.typePoubelle = typePoubelle;
        this.quantiteActuelle = quantiteActuelle; // üî• ici : on respecte ce qu'on r√©cup√®re
        this.historiqueDepots = new ArrayList<>();
        this.accesAutorises = new ArrayList<>();
        this.utilisateursAutorises = new ArrayList<>();
        this.dechetsAutorises = typePoubelle.getTypesAcceptes();
        this.seuilAlerte = seuilAlerte;
        this.centreDeTri = centreDeTri;
    }




    // ========== M√âTHODES UML ==========

    /** Verifie si un utilisateur est autorise √† acc√©der √† la poubelle */
    public boolean identifierUtilisateur(Utilisateur u) {
        return utilisateursAutorises.contains(u);
    }

    /** Verifie si un d√©chet est autoris√© dans cette poubelle */
    public boolean verifierTypeDechets(NatureDechet type) {
        return dechetsAutorises.contains(type);
    }

    /** Attribue les points de fid√©lite a un utilisateur pour un depot */
    public void attribuerPoint(Utilisateur u) {
        int total = historiqueDepots.stream()
                .filter(d -> d.getUtilisateur().equals(u))
                .mapToInt(Depot::getPoints)
                .sum();
        u.ajouterPoints(total);
    }

    /** Envoie une alerte au centre de tri si le seuil est depassee */
    public void notifierCentreTri() {
        if (quantiteActuelle >= seuilAlerte) {
            System.out.println("‚ö† Alerte : seuil atteint √† la poubelle #" + id);
        }
    }

    /** Verifie si le code d'acces fourni est valide */
    public boolean verifierAcces(int code) {
        return accesAutorises.contains(code);
    }

    /** Ajoute un depot √† la poubelle */
    public void ajouterDechets(Depot d) {
        historiqueDepots.add(d);
        quantiteActuelle += d.getQuantite();
        notifierCentreTri();
    }

    /** Verifie si la poubelle est pleine */
    public boolean estPleine() {
        return quantiteActuelle >= capaciteMax;
    }

    /** Calcule une penalit√© en fonction du non-respect des r√®gles de tri */
    public void calculerPenalite(Utilisateur u) {
        System.out.println("P√©nalit√© enregistr√©e pour l'utilisateur : " + u.getNom());
    }

    /** Accepte un d√©p√¥t si tout est conforme */
    public boolean accepterDepot(Depot d, Utilisateur u) {
        if (!verifierAcces(u.getCodeAcces())) return false;
        if (!verifierTypeDechets(d.getType())) return false;
        if (estPleine()) return false;
        ajouterDechets(d);
        attribuerPoint(u);
        return true;
    }

    /** Calcule le taux de remplissage (entre 0 et 1) */
    public float getTauxRemplissage() {
        return (float) quantiteActuelle / capaciteMax;
    }

    // ========== GETTERS ==========

    public int getId() { return id; }

    public int getCapaciteMax() { return capaciteMax; }

    public String getEmplacement() { return emplacement; }

    /** Calcule le poids total de d√©chets d√©pos√©s dans cette poubelle */
    public float getPoidsTotal() {
        return (float) historiqueDepots.stream()
                .mapToDouble(Depot::getPoids)
                .sum();
    }
    public void setQuantiteActuelle(int quantiteActuelle) {
        this.quantiteActuelle = quantiteActuelle;
    }

    public CentreDeTri getCentreDeTri() {
        return centreDeTri;
    }

    public TypePoubelle getTypePoubelle() { return typePoubelle; }

    public int getQuantiteActuelle() { return quantiteActuelle; }

    public List<Depot> getHistoriqueDepots() { return historiqueDepots; }

    public List<NatureDechet> getDechetsAutorises() { return dechetsAutorises; }

    public List<Utilisateur> getUtilisateursAutorises() { return utilisateursAutorises; }

    public List<Integer> getAccesAutorises() { return accesAutorises; }

    public int getSeuilAlerte() { return seuilAlerte; }

}
